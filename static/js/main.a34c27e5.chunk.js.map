{"version":3,"sources":["components/featuredComic.js","components/thumbnailComicNavigation.js","components/textComicNavigation.js","App.js","serviceWorker.js","index.js"],"names":["FeaturedComic","renderComic","obj","react_default","a","createElement","key","date","className","title","alt","src","image","subtitle","this","props","featuredComic","Component","ThumbnailComicNavigation","renderComicNavigation","i","onClick","_this","setComic","currentComic","thumbnail","_this2","Gallery","map","TextComicNavigation","navComic","style","margin","length","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","navigation","setState","state","rand","Math","floor","random","num","handleKeyDown","bind","assertThisInitialized","e","keyCode","document","addEventListener","display","textComicNavigation","thumbnailComicNavigation","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a34c27e5.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass FeaturedComic extends Component {\r\n\trender() {\r\n\t\treturn (\r\n            <section className=\"comic_section\">\r\n                { this.renderComic(this.props.featuredComic) }\r\n            </section>\r\n\t\t);\r\n\t}\r\n\r\n    renderComic = (obj) => {\r\n        return [\r\n            <div key={obj.date}>\r\n                <h2 className=\"comic_title\">{obj.title}</h2>\r\n                <div className=\"comic_wrapper\">\r\n                    <img className=\"comic_image\" alt={obj.title} src={obj.image} />\r\n                    <p className=\"comic_meta-data\">\r\n                        <i className=\"comic_subtitle\">{obj.subtitle}</i>\r\n                        <small className=\"comic_date FR\">Created on: {obj.date}</small>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        ]\r\n    }\t\r\n}\r\n\r\nexport default FeaturedComic;\r\n","import React, {Component} from 'react';\r\n\r\nclass ThumbnailComicNavigation extends Component {\r\n\trender() {\r\n        return [\r\n            <section className=\"comic_thumbnail_navigation\">\r\n                { this.props.Gallery.map((obj, i) => this.renderComicNavigation(obj, i)) }\r\n            </section>\r\n        ]\r\n\t}\r\n\r\n\trenderComicNavigation = (obj,i) => {\r\n\t\treturn [\r\n\t\t\t<div onClick={() => this.props.setComic(i)} key={i} className={(this.props.currentComic === i ? \"selected\" : \"\") + \" comic_image-small-wrapper\"}>\r\n\t\t\t\t<img className=\"comic_image-small\" alt={obj.title} src={obj.thumbnail} />\r\n\t\t\t</div>\r\n\t\t]\r\n\t}\r\n}\r\n\r\nexport default ThumbnailComicNavigation;\r\n","import React, {Component} from 'react';\r\n\r\nclass TextComicNavigation extends Component {\r\n\trender() {\r\n        return [\r\n            <section className=\"comic_navigation\">\r\n                <div>\r\n                    <span className={(this.props.currentComic === 0 ? 'hidden' : '') + \" comic_navigation-button\"} onClick={() => this.props.navComic('prev')}>newer</span>\r\n                    <span className={\"comic_navigation-button\"} style={{margin: '0px 10vw'}} onClick={() => this.props.navComic('rand')}>random</span>\r\n                    <span className={(this.props.Gallery.length - 1 === this.props.currentComic ? 'hidden' : '') + \" comic_navigation-button \"} onClick={() => this.props.navComic('next')}>older</span>\r\n                </div>\r\n            </section>\r\n        ]\r\n\t}\r\n}\r\n\r\nexport default TextComicNavigation;\r\n","import React, {Component} from 'react';\r\nimport FeaturedComic from './components/featuredComic';\r\nimport ThumbnailComicNavigation from './components/thumbnailComicNavigation';\r\nimport TextComicNavigation from './components/textComicNavigation';\r\nimport './App.css';\r\nimport Gallery from './images.json';\r\n\r\nclass App extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.handleKeyDown = this.handleKeyDown.bind(this)\r\n\t\tthis.setComic = this.setComic.bind(this)\r\n\t\tthis.navComic = this.navComic.bind(this)\r\n\t\tthis.state = {\r\n\t\t\tcurrentComic: 0,\r\n\t\t}\r\n\t}\r\n    handleKeyDown(e) {\r\n\t\tconst { currentComic } = this.state\r\n\t\tif (e.keyCode === 39 && Gallery.length - 1 !== currentComic) {\r\n\t\t\tthis.navComic('next')\r\n\t\t} else if (e.keyCode === 37 && currentComic !== 0) {\r\n\t\t\tthis.navComic('prev')\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tdocument.addEventListener(\"keydown\", this.handleKeyDown, false);\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst { currentComic } = this.state\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<header></header>\r\n\t\t\t\t<FeaturedComic\r\n\t\t\t\t\tfeaturedComic={Gallery[currentComic]}>\r\n\t\t\t\t</FeaturedComic>\r\n\t\t\t\t<img style={{'display': 'none'}} src={Gallery[currentComic + 1] ? Gallery[currentComic+1].image : ''} alt=\"\"/>\r\n\t\t\t\t<TextComicNavigation \r\n\t\t\t\t\tGallery={Gallery} \r\n\t\t\t\t\tcurrentComic={currentComic}\r\n\t\t\t\t\tnavComic={this.navComic}>\r\n\t\t\t\t</TextComicNavigation>\r\n\t\t\t\t<ThumbnailComicNavigation \r\n\t\t\t\t\tGallery={Gallery} \r\n\t\t\t\t\tcurrentComic={currentComic} \r\n\t\t\t\t\tsetComic={this.setComic}>\r\n\t\t\t\t</ThumbnailComicNavigation>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\tnavComic = (navigation) => {\r\n\t\tif (navigation !== null) {\r\n\t\t\tswitch (navigation) {\r\n\t\t\t\tcase 'prev':\r\n\t\t\t\t\tthis.setState({ currentComic: this.state.currentComic - 1 })\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 'next':\r\n\t\t\t\t\tthis.setState({ currentComic: this.state.currentComic + 1 })\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 'rand':\r\n\t\t\t\t\tlet rand = Math.floor(Math.random() * (Gallery.length - 1))\r\n\t\t\t\t\tthis.setState({ currentComic: rand })\r\n\t\t\t\t\tbreak\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tsetComic = (num) => {\r\n\t\tif (num !== this.state.currentComic) {\r\n\t\t\tthis.setState({ currentComic: num })\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}